library(EpiEstim)
outdir="/home/patrick/results/COVID19/mobility_and_spread/US/EpiEstimR/"
epidemic_data="./complete_case_df.csv"
country="Alabama"
#Read data
epidemic_df <- read.csv(epidemic_data)
#Get data per country
country_df <-epidemic_df[epidemic_df$countriesAndTerritories==country,]
View(country_df)
#Get data per country
country_df <-epidemic_df[epidemic_df$region==country,]
View(country_df)
#Sort on date
country_df <-country_df[order(as.Date(country_df$dateRep, format="%d/%m/%Y")),]
#Sort on date
country_df <-country_df[order(as.Date(country_df$date, format="%d/%m/%Y")),]
View(country_df)
#Get cases for modeling
country_cases <-country_df[,c("cases")]
cases
country_cases
#Variabel Serial Interval
R_estimate <-estimate_R(country_cases,  method="uncertain_si", config = make_config(list(mean_si = 7.5, std_mean_si = 2,min_mean_si = 1, max_mean_si = 8.4, std_si = 3.4, std_std_si = 1, min_std_si = 0.5, max_std_si = 4, n1 = 1000, n2 = 1000)))
#Plotting function
# custom results plotting function to avoid the ugly
# TableGrob messages returned by the plotting function in the
# EpiEstim package
plot_Ri <- function(estimate_R_obj) {
p_I <- plot(estimate_R_obj, "incid", add_imported_cases = TRUE)  # plots the incidence
p_SI <- plot(estimate_R_obj, "SI")  # plots the serial interval distribution
p_Ri <- plot(estimate_R_obj, "R")
return(gridExtra::grid.arrange(p_I, p_SI, p_Ri, ncol = 1))
}
plot_Ri(R_estimate)
#Plotting function
# custom results plotting function to avoid the ugly
# TableGrob messages returned by the plotting function in the
# EpiEstim package
plot_Ri <- function(estimate_R_obj) {
p_I <- plot(estimate_R_obj, "incid", add_imported_cases = TRUE)  # plots the incidence
p_SI <- plot(estimate_R_obj, "SI")  # plots the serial interval distribution
p_Ri <- plot(estimate_R_obj, "R")
return(gridExtra::grid.arrange(p_I, p_SI, p_Ri, ncol = 1))
}
plot_Ri(R_estimate)
#Variabel Serial Interval
R_estimate <-estimate_R(country_cases,  method="uncertain_si", config = make_config(list(mean_si = 7.5, std_mean_si = 2,min_mean_si = 1, max_mean_si = 8.4, std_si = 3.4, std_std_si = 1, min_std_si = 0.5, max_std_si = 4, n1 = 1000, n2 = 1000)))
#Plotting function
# custom results plotting function to avoid the ugly
# TableGrob messages returned by the plotting function in the
# EpiEstim package
plot_Ri <- function(estimate_R_obj) {
p_I <- plot(estimate_R_obj, "incid", add_imported_cases = TRUE)  # plots the incidence
p_SI <- plot(estimate_R_obj, "SI")  # plots the serial interval distribution
p_Ri <- plot(estimate_R_obj, "R")
return(gridExtra::grid.arrange(p_I, p_SI, p_Ri, ncol = 1))
}
plot_Ri(R_estimate)
View(R_estimate)
dates
#Add the dates to the R estimates. The R estimate will start at index 7 due to the
#7-day sliding window
end_i<-length(country_df[,1])
dates<-country_df[(8:end_i),c("date")]
plot_Ri(R_estimate)
#Add the dates to the R estimates. The R estimate will start at index 7 due to the
#7-day sliding window
end_i<-length(country_df[,1])
dates<-country_df[(8:end_i),c("date")]
#Out df
out_df<-R_estimate$R
out_df$date<-dates
View(out_df)
plot_Ri(R_estimate)
#Plotting function
# custom results plotting function to avoid the ugly
# TableGrob messages returned by the plotting function in the
# EpiEstim package
plot_Ri <- function(estimate_R_obj) {
p_I <- plot(estimate_R_obj, "incid", add_imported_cases = TRUE)  # plots the incidence
p_SI <- plot(estimate_R_obj, "SI")  # plots the serial interval distribution
p_Ri <- plot(estimate_R_obj, "R")
return(gridExtra::grid.arrange(p_I, p_SI, p_Ri, ncol = 1))
}
plot_Ri(R_estimate)
#Variabel Serial Interval
R_estimate <-estimate_R(country_cases,  method="uncertain_si", config = make_config(list(mean_si = 7.5, std_mean_si = 2,min_mean_si = 1, max_mean_si = 8.4, std_si = 3.4, std_std_si = 1, min_std_si = 0.5, max_std_si = 4, n1 = 1000, n2 = 1000)))
plot_Ri(R_estimate)
plot_Ri(R_estimate)
library(EpiEstim)
outdir="/home/patrick/results/COVID19/mobility_and_spread/US/EpiEstimR/"
epidemic_data="./complete_case_df.csv"
country="New Hampshire"
#Read data
epidemic_df <- read.csv(epidemic_data)
#Get data per country
country_df <-epidemic_df[epidemic_df$region==country,]
#Sort on date
country_df <-country_df[order(as.Date(country_df$date, format="%d/%m/%Y")),]
#Get cases for modeling
country_cases <-country_df[,c("cases")]
#Estimate R
R_estimate <- estimate_R(country_cases, method = "parametric_si", config = make_config(list(mean_si = 4.8, std_si = 2.3)))
View(R_estimate)
#Estimate R
R_estimate <- estimate_R(country_cases, method = "parametric_si", config = make_config(list(mean_si = 4.8, std_si = 2.3)))
#Add the dates to the R estimates. The R estimate will start at index 7 due to the
#7-day sliding window
end_i<-length(country_df[,1])
dates<-country_df[(8:end_i),c("date")]
#Out df
out_df<-R_estimate$R
out_df$date<-dates
#Define output name
outname<-paste(outdir,country,'_R_estimate.csv',sep="")
#Save results
write.csv(out_df,outname)
outdir="/home/patrick/results/COVID19/mobility_and_spread/US/EpiEstimR/"
epidemic_data="./complete_case_df.csv"
country="New Hampshire"
#Read data
epidemic_df <- read.csv(epidemic_data)
#Get data per country
country_df <-epidemic_df[epidemic_df$region==country,]
#Sort on date
country_df <-country_df[order(as.Date(country_df$date, format="%d/%m/%Y")),]
#Get cases for modeling
country_cases <-country_df[,c("cases")]
#Estimate R
R_estimate <- estimate_R(country_cases, method = "parametric_si", config = make_config(list(mean_si = 4.8, std_si = 2.3)))
#Add the dates to the R estimates. The R estimate will start at index 7 due to the
#7-day sliding window
end_i<-length(country_df[,1])
#Estimate R
R_estimate <- estimate_R(country_cases, method = "parametric_si", config = make_config(list(mean_si = 4.8, std_si = 2.3)))
library(EpiEstim)
outdir="/home/patrick/results/COVID19/mobility_and_spread/US/EpiEstimR/"
epidemic_data="./complete_case_df.csv"
country="New Hampshire"
#Read data
epidemic_df <- read.csv(epidemic_data)
#Get data per country
country_df <-epidemic_df[epidemic_df$region==country,]
#Sort on date
country_df <-country_df[order(as.Date(country_df$date, format="%d/%m/%Y")),]
#Get cases for modeling
country_cases <-country_df[,c("cases")]
#Estimate R
R_estimate <- estimate_R(country_cases, method = "parametric_si", config = make_config(list(mean_si = 4.8, std_si = 2.3)))
#Add the dates to the R estimates. The R estimate will start at index 7 due to the
#7-day sliding window
end_i<-length(country_df[,1])
dates<-country_df[(8:end_i),c("date")]
#Out df
out_df<-R_estimate$R
out_df$date<-dates
#Define output name
outname<-paste(outdir,country,'_R_estimate.csv',sep="")
#Save results
write.csv(out_df,outname)
country="New_Hampshire"
grepl(country, '_')
grepl(country, "_")
grepl(country, "New")
country
"_" in country
str_contains(country,"_")
str_detect(country, "_")
?grepl
grepl("_", country)
strsplit(country, "_")
country
country = strsplit(country, "_")
country
country[0]
paste(country)
paste(country, " ")
country = strsplit("New_Hampshire", "//_")
country
country = strsplit("New_Hampshire", "\\_")
country
paste(country)
paste(country)[0]
country = strsplit("New_Hampshire", "_")
paste(country)
paste(country, " ")
paste(country, "       ")
country
country[1]
country[1][1]
country[1][1][0]
country[[1]][1]
paste(country[[1]][1], country[[1]][2])
country="New_Hampshire"
if (grepl("_", country)){
country = strsplit(country, "_")
country = paste(country[[1]][1], country[[1]][2])
}
#Read data
epidemic_df <- read.csv(epidemic_data)
#Get data per country
country_df <-epidemic_df[epidemic_df$region==country,]
#Sort on date
country_df <-country_df[order(as.Date(country_df$date, format="%d/%m/%Y")),]
#Get cases for modeling
country_cases <-country_df[,c("cases")]
#Estimate R
R_estimate <- estimate_R(country_cases, method = "parametric_si", config = make_config(list(mean_si = 4.8, std_si = 2.3)))
